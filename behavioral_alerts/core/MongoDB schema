// users collection
{
  "user_id": UUID,
  "name": String,
  "email": String,
  "phone": String,
  "emergency_contact_phone": String, // Primary contact for alerts
  "emergency_contacts": [{name: String, phone: String}], // Additional contacts
  "behavior_profile": {
    "centroids": [{cluster_id: Int, center: {type: "Point", coordinates: [Float, Float]}, radius: Float}],
    "hour_freq": {hour: Float},
    "weekday_freq": {weekday: Float},
    "month_freq": {month: Float},
    "last_updated": ISODate
  },
  "ml_model": { //for profile
    "optics_model": String, // Base64-encoded OPTICS model
    "scaler": String, // Base64-encoded scaler
    "saved_at": ISODate
  },
  "threshold_model": {
    "model": String, // Base64-encoded RandomForest model
    "saved_at": ISODate
  },
  "ml_incident_model": {
    "xgboost_model": String, // Base64-encoded XGBoost model
    "scaler": String, // Base64-encoded scaler
    "saved_at": ISODate
  },
  "created_at": ISODate,
  "updated_at": ISODate
}

// locations collection (time-series)
{
  "user_id": UUID,
  "device_id": UUID,
  "location": {type: "Point", coordinates: [Float, Float]},
  "timestamp": ISODate,
  "location_type": "gps|wifi|bluetooth|uwb",
  "alert": {
    "alert_id": UUID,
    "alert_time": ISODate,
    "audio_file": String, // Path to audio file // then will be sent to the vocal models and to the police
    "health_data": {heart_rate: Float, stress: Float}, // Optional biomonitoring data
    "location_anomaly_score": Float,
    "time_anomaly_score": Float,
    "ai_score": Float, // Incident probability from XGBoost
    "is_incident": Boolean, // Ground truth (if available)
    "status": "pending|processed|resolved|sent_to_police",
    "nearest_police_station": {name: String, address: String, distance_m: Float}
  }
}